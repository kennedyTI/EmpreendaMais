# ------------------------------
# Importa√ß√µes
# ------------------------------
from uuid import uuid4
from datetime import datetime, timedelta
from app.db.mongo import db

# ------------------------------
# Constantes
# ------------------------------
STATE_EXPIRATION_MINUTES = 10  # ‚è± Tempo de validade do par√¢metro 'state' (em minutos)
COLLECTION_NAME = "oauth_states"  # üì¶ Nome da cole√ß√£o no MongoDB

# ------------------------------
# Fun√ß√£o para gerar um 'state' √∫nico e armazenar com validade
# ------------------------------
async def generate_oauth_state() -> str:
    state = uuid4().hex  # üîë Gera um identificador √∫nico e aleat√≥rio
    expires_at = datetime.utcnow() + timedelta(minutes=STATE_EXPIRATION_MINUTES)

    await db[COLLECTION_NAME].insert_one({
        "state": state,
        "expires_at": expires_at
    })

    return state

# ------------------------------
# Fun√ß√£o para validar um 'state': verifica se existe, n√£o expirou e apaga ap√≥s uso
# ------------------------------
async def validate_oauth_state(state: str) -> bool:
    if not state:
        return False

    record = await db[COLLECTION_NAME].find_one({"state": state})

    if not record:
        return False

    expires_at = record.get("expires_at")

    # ‚è± Verifica se o 'state' expirou
    if not expires_at or expires_at < datetime.utcnow():
        # Remove registro expirado para limpeza do banco
        await db[COLLECTION_NAME].delete_one({"_id": record["_id"]})
        return False

    # üîí Remove para garantir uso √∫nico do state
    await db[COLLECTION_NAME].delete_one({"_id": record["_id"]})
    return True
